// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebCoreAppFramework.Data;

namespace WebCoreAppFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191004165507_UserSessions")]
    partial class UserSessions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebCoreAppFramework.Models.About", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CountyId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long?>("GeoLocationId");

                    b.Property<string>("PCLocation")
                        .IsRequired();

                    b.Property<long>("PostalCodeId");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("GeoLocationId");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationTenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AboutId");

                    b.Property<long?>("AddressId");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("LogoURL");

                    b.Property<string>("ManagerId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneContact");

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ManagerId");

                    b.ToTable("ApplicationTenants");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<long?>("AddressId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long?>("CountryId");

                    b.Property<Guid?>("CurrentSessionId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FiscalNumber");

                    b.Property<long?>("LanguageId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("System");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrentSessionId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<long>("TenantId");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("UserId", "TenantId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.CountryLanguage", b =>
                {
                    b.Property<long>("CountryId");

                    b.Property<long>("LanguageId");

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("CountryId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryLanguages");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.County", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.CurrentUserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("GeoLocationId");

                    b.Property<long>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("GeoLocationId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Districs");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.GeoLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageCode");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.PostalCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CountyId");

                    b.Property<string>("LocationName")
                        .IsRequired();

                    b.Property<string>("Prefix")
                        .IsRequired();

                    b.Property<string>("Sufix")
                        .IsRequired();

                    b.Property<bool>("System");

                    b.Property<bool>("Visible");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("PostalCodes");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.Address", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.County")
                        .WithMany("Addresses")
                        .HasForeignKey("CountyId");

                    b.HasOne("WebCoreAppFramework.Models.GeoLocation", "GeoLocation")
                        .WithMany("Addresses")
                        .HasForeignKey("GeoLocationId");

                    b.HasOne("WebCoreAppFramework.Models.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationTenant", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.About", "About")
                        .WithMany()
                        .HasForeignKey("AboutId");

                    b.HasOne("WebCoreAppFramework.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("WebCoreAppFramework.Models.ApplicationUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("WebCoreAppFramework.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("WebCoreAppFramework.Models.CurrentUserSession", "CurrentSession")
                        .WithMany()
                        .HasForeignKey("CurrentSessionId");

                    b.HasOne("WebCoreAppFramework.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebCoreAppFramework.Models.ApplicationTenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebCoreAppFramework.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.CountryLanguage", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.Country", "Country")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebCoreAppFramework.Models.Language", "Language")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.County", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.District", "District")
                        .WithMany("Counties")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.CurrentUserSession", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.GeoLocation", "GeoLocation")
                        .WithMany()
                        .HasForeignKey("GeoLocationId");

                    b.HasOne("WebCoreAppFramework.Models.ApplicationTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.District", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.Country", "Country")
                        .WithMany("Districts")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("WebCoreAppFramework.Models.PostalCode", b =>
                {
                    b.HasOne("WebCoreAppFramework.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");
                });
#pragma warning restore 612, 618
        }
    }
}
